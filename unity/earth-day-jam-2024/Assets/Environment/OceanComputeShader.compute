// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma 

struct Voxel
{
    float3 position;
    int isVisible;
};

RWStructuredBuffer<Voxel> voxels;

float speed;
float amplitude;
float fixed_delta_time;
float fixed_time;
float perlin_scale;
float size;
float3 transform_position;
int density;
float center_offset;

float4 planes[6];

float _step;

float2 get_uv (uint3 id) {
    return (id.xy + 0.5) * _step - 1.0;
}

float3 mod289(float3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float2 mod289(float2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float3 permute(float3 x) {
    return mod289((x * 34.0 + 1.0) * x);
}

float3 taylorInvSqrt(float3 r) {
    return 1.79284291400159 - 0.85373472095314 * r;
}

// output noise is in range [-1, 1]
float snoise(float2 v) {
    const float4 C = float4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                            0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                            -0.577350269189626, // -1.0 + 2.0 * C.x
                            0.024390243902439); // 1.0 / 41.0

    // First corner
    float2 i  = floor(v + dot(v, C.yy));
    float2 x0 = v -   i + dot(i, C.xx);

    // Other corners
    float2 i1;
    i1.x = step(x0.y, x0.x);
    i1.y = 1.0 - i1.x;

    // x1 = x0 - i1  + 1.0 * C.xx;
    // x2 = x0 - 1.0 + 2.0 * C.xx;
    float2 x1 = x0 + C.xx - i1;
    float2 x2 = x0 + C.zz;

    // Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    float3 p =
      permute(permute(i.y + float3(0.0, i1.y, 1.0))
                    + i.x + float3(0.0, i1.x, 1.0));

    float3 m = max(0.5 - float3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);
    m = m * m;
    m = m * m;

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
    float3 x = 2.0 * frac(p * C.www) - 1.0;
    float3 h = abs(x) - 0.5;
    float3 ox = floor(x + 0.5);
    float3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
    m *= taylorInvSqrt(a0 * a0 + h * h);

    // Compute final noise value at P
    float3 g = float3(
        a0.x * x0.x + h.x * x0.y,
        a0.y * x1.x + h.y * x1.y,
        g.z = a0.z * x2.x + h.z * x2.y
    );
    return 130.0 * dot(m, g);
}

bool is_inside_frustum(float3 position)
{
    bool inside_frustum = true;
    for (uint i = 0; i < 6; ++i) {
        const float distance = dot(planes[i], float4(position, 1.0));
        const float radius = dot(abs(planes[i]), float4(1.0f, 1.0f, 1.0f, 0.0));
        if (distance < -radius) {
            inside_frustum = false;
            break;
        }
    }
    return inside_frustum;
}

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    const int index = id.x * density + id.y;
    Voxel voxel = voxels[index];
    voxel.isVisible = is_inside_frustum(voxel.position);
    const float magic_speed_multiplier = 3.75f; // this value still needs to be tweaked
    // calculating how far we need to offset the noise to get "panning"
    const float2 transform_offset = float2((float)id.x / density + transform_position[0] / magic_speed_multiplier * fixed_delta_time,
                                       (float)id.y / density + transform_position[2] / magic_speed_multiplier * fixed_delta_time);
    const float noise = snoise(transform_offset * perlin_scale + fixed_time * fixed_delta_time * speed);
    voxel.position[1] = noise * amplitude;
    voxel.position[0] = (id.x - center_offset) * size;  // make sure the player is in the horizontal center
    voxel.position[2] = (id.y - density / 10.0f) * size;  // make sure we don't see the edge
    voxels[index] = voxel;
}
